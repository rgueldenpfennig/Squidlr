@using Microsoft.AspNetCore.WebUtilities;
@using Squidlr.Twitter.Utilities;
@using Squidlr.Web.States;

@inject UrlResolver UrlResolver

@inject ClipboardService ClipboardService
@inject NavigationManager NavigationManager
@inject VideoSearchQueryState State

@if (ShowPlatformTabs)
{
    <ul class="nav nav-tabs border-0 fw-bold text-body-emphasis user-select-none">
        <li class="nav-item">
            <span class="@((IsActive(SocialMediaPlatform.Twitter) ? "nav-link active" : "nav-link"))">X / Twitter</span>
        </li>
        <li class="nav-item">
            <span class="@((IsActive(SocialMediaPlatform.Instagram) ? "nav-link active" : "nav-link"))">Instagram</span>
        </li>
    </ul>
}

<div class="d-flex flex-column align-items-center">
    <div class="input-group mb-3">
        <button class="btn btn-primary" type="button" title="Paste from clipboard">
            <span class="oi oi-clipboard" data-glyph="clipboard" aria-hidden="true"></span>
        </button>
        <input @ref=_inputReference type="text" autocomplete="on" class="form-control shadow-none" placeholder="Paste your link here" inputmode="url" aria-label="Download URL" aria-describedby="download-button" @bind:event="oninput" @bind:get="State.Url" @bind:set="HandleInput" @onkeypress="OnKeyPress" />
    </div>
    <div class="mb-4">
        <button class="btn btn-primary" type="button" id="download-button" disabled="@(!_downloadEnabled)" @onclick="DownloadVideo">Download</button>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-info text-center" role="alert">@((MarkupString)_errorMessage)</div>
    }

    @if (ShowSample)
    {
        <div class="text-break text-muted"><p>Try out an example X post containing multiple videos: <a href="#" @onclick="OnSampleClick">@_sampleUrl</a></p></div>
    }
</div>

@code {
    [Parameter]
    public bool ShowSample { get; set; }

    [Parameter]
    public bool ShowPlatformTabs { get; set; }

    [Parameter]
    public bool FocusInput { get; set; }

    private ElementReference _inputReference;

    private ContentIdentifier _contentIdentifier = ContentIdentifier.Unknown;
    private bool _downloadEnabled;
    private string? _errorMessage;

    private string _sampleUrl = "https://x.com/primevideouk/status/1578401165338976258";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (FocusInput && firstRender)
        {
            await _inputReference.FocusAsync();
        }
    }

    private async Task PasteClipboard()
    {
        try
        {
            var text = await ClipboardService.ReadTextAsync();
            HandleInput(text);
        }
        catch
        {
            _errorMessage = $"Sorry, Squidlr is not able to read from your clipboard this time :-(<br/>Please paste your URL manually.";
        }
    }

    private void HandleInput(string? value)
    {
        State.Url = value;

        if (!string.IsNullOrEmpty(State.Url))
        {
            _contentIdentifier = UrlResolver.ResolveUrl(State.Url);
            if (_contentIdentifier != ContentIdentifier.Unknown)
            {
                _downloadEnabled = true;
                _errorMessage = null;

                return;
            }

            _errorMessage = "Please ensure to enter a valid URL before you continue.";
        }

        _downloadEnabled = false;
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && _downloadEnabled)
        {
            DownloadVideo();
        }
    }

    private void OnSampleClick()
    {
        HandleInput(_sampleUrl);
    }

    private void DownloadVideo()
    {
        var url = State.Url;
        State.Url = null;

        NavigationManager.NavigateTo(QueryHelpers.AddQueryString("/download", "url", url!));
    }

    private bool IsActive(SocialMediaPlatform platform)
    {
        return _contentIdentifier.Platform == platform;
    }
}
