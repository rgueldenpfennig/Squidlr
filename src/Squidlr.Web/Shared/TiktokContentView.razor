@using System.Globalization;
@using Squidlr.Shared;
@using Squidlr.Tiktok
@using Squidlr.Web.Clients

@inject NavigationManager NavigationManager
@inject ClientDiscoveryService ClientDiscoveryService

@if (Content is not null)
{
    var title = SeoProperties.CreatePageTitle($"{Content.UserName} on TikTok: " + FormatHelper.FormatContentTitle(Content.FullText));
    string? videoMediaUrl = null;

    <PageTitle>@title</PageTitle>
    <HeadContent>
        <meta name="og:title" content="@title" />
        <meta name="og:description" content="@SeoProperties.Description" />
        <meta name="og:type" content="video.other" />
        <meta name="og:site_name" content="squidlr.com" />
        <meta name="og:url" content="@(NavigationManager.Uri)" />
        @if (videoMediaUrl != null)
        {
            <meta name="og:image" content="@videoMediaUrl" />
        }
        <meta name="twitter:creator" content="@@@Content.UserName" />
        <meta name="twitter:site" content="@@SquidlrBot" />
        <meta name="twitter:domain" content="squidlr.com">
    </HeadContent>

    <div class="px-4 my-4 text-center">
        <h1 class="display-6 fw-bold text-body-emphasis">TikTok video download</h1>
    </div>

    <div class="card mb-4">
        <div class="card-body pb-0">
            <p class="card-text">
                @if (Content.FullText != null)
                {
                    <blockquote class="blockquote">
                        <p class="content-text">@((MarkupString)Content.FullText)</p>
                        <footer class="blockquote-footer">@string.Format("@{0}", Content.UserName)</footer>
                    </blockquote>
                }
                <a href="@Content.SourceUrl">
                    <time datetime="@Content.CreatedAtUtc.ToString("O", CultureInfo.InvariantCulture)">
                        @Content.CreatedAtUtc.ToString("f", CultureInfo.InvariantCulture)
                    </time>
                </a>
                @if (Content.PlayCount is not null)
                {
                    <span> - <strong>@FormatHelper.FormatNumber(Content.PlayCount.Value)</strong> <small>Views</small></span>
                }

                <ul class="list-inline mt-1">
                    <li class="list-inline-item"><strong>@FormatHelper.FormatNumber(Content.FavoriteCount)</strong> <small>Likes</small></li>
                    <li class="list-inline-item"><strong>@FormatHelper.FormatNumber(Content.ReplyCount)</strong> <small>Comments</small></li>
                    @if (Content.CollectCount is not null)
                    {
                        <li class="list-inline-item"><strong>@FormatHelper.FormatNumber(Content.CollectCount.Value)</strong> <small>Bookmarks</small></li>
                    }
                    @if (Content.ShareCount is not null)
                    {
                        <li class="list-inline-item"><strong>@FormatHelper.FormatNumber(Content.ShareCount.Value)</strong> <small>Shares</small></li>
                    }
                </ul>
            </p>

            @{
                int videoNumber = 0;
            }
            @foreach (var video in Content.Videos)
            {
                videoNumber++;
                <div class="card mb-3 border-0">
                    <div class="row g-0">
                        <div class="col-md-4">
                            @if (video.DisplayUrl != null)
                            {
                                videoMediaUrl ??= video.DisplayUrl.ToString();
                                <img src="@video.DisplayUrl" class="img-fluid mb-2 rounded" alt="Video thumbnail">
                            }
                        </div>
                        <div class="col-md-8">
                            <div class="card-body pt-0">
                                <h2 class="card-title">Video #@videoNumber</h2>
                                <div class="card-text">
                                    <ul class="list-inline mt-1">
                                        @if (@video.Duration is not null)
                                        {
                                            <li class="list-inline-item"><strong>@FormatHelper.FormatDuration(video.Duration.Value)</strong></li>
                                        }
                                        @if (@video.Views is not null)
                                        {
                                            <li class="list-inline-item"><strong>@FormatHelper.FormatNumber(@video.Views.Value)</strong> <small>Views</small></li>
                                        }
                                    </ul>
                                </div>
                                <div class="list-group">
                                    @{
                                        var videoSources = video.VideoSources.OrderByDescending(vs => vs.Bitrate).ToArray();
                                        int videoSourceIndex = 0;
                                    }
                                    @foreach (var source in videoSources)
                                    {
                                        <a class="btn btn-primary list-group-item list-group-item-action mb-1" role="button" href="@GetVideoStreamUrl(source)" target="_blank">
                                            <div class="d-flex w-100 justify-content-between">
                                                <h5 class="mb-1">@FormatHelper.CreateVideoResolutionText(videoSources, videoSourceIndex)</h5>
                                                <span class="oi oi-cloud-download" data-glyph="cloud-download" title="Download" aria-hidden="true"></span>
                                            </div>
                                            <p class="mb-1">
                                                @if (source.Size != VideoSize.Empty)
                                                {
                                                    @string.Format("{0} x {1}", @source.Size.Width, @source.Size.Height)
                                                }
                                                else
                                                {
                                                    @((MarkupString)"Unknown video resolution")
                                                }
                                            </p>
                                            <ul class="list-unstyled mb-0">
                                                @if (source.ContentLength != null)
                                                {
                                                    <li class="list-item"><small>Size: @source.ContentLength.Value.Bytes().Humanize("#.#")</small></li>
                                                }
                                                <li class="list-item"><small>Bitrate: @string.Format("{0:N0}", @source.Bitrate)</small></li>
                                            </ul>
                                        </a>
                                        videoSourceIndex++;
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">No content has been provided.</div>
}

@code {
    [Parameter]
    public TiktokContent? Content { get; set; }

    private Uri GetVideoStreamUrl(VideoSource source)
    {
        ArgumentNullException.ThrowIfNull(source);

        var selector =  source.Url.AbsolutePath.Substring(0, source.Url.AbsolutePath.LastIndexOf('/'));
        return ClientDiscoveryService.GetVideoStreamUrl(Content!.SourceUrl, selector);
    }
}
