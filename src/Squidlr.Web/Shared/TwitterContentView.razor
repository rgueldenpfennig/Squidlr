@using System.Globalization;
@using Squidlr.Twitter;

@inject IJSRuntime JS
@inject NavigationManager NavigationManager

@if (TwitterContent is not null)
{
    var title = SeoProperties.CreatePageTitle(TwitterContent.FullText?.Replace(Environment.NewLine, ""));
    string? videoMediaUrl = null;

    <PageTitle>@title</PageTitle>
    <HeadContent>
        <meta name="og:title" content="@title" />
        <meta name="og:description" content="@SeoProperties.Description" />
        <meta name="og:type" content="video.other" />
        <meta name="og:site_name" content="squidlr.com" />
        <meta name="og:url" content="@(NavigationManager.Uri)" />
        @if (videoMediaUrl != null)
        {
            <meta name="og:image" content="@videoMediaUrl" />
        }
        <meta name="twitter:creator" content="@@@TwitterContent.UserName" />
        <meta name="twitter:site" content="@@SquidlrBot" />
        <meta name="twitter:domain" content="squidlr.com">
    </HeadContent>

    <div class="px-4 my-4 text-center">
        <h1 class="display-6 fw-bold text-body-emphasis">Download your X video</h1>
    </div>

    <div class="card mb-4">
        <div class="card-body pb-0">
            <p class="card-text">
                @if (TwitterContent.FullText != null)
                {
                    <blockquote class="blockquote">
                        <p style="white-space: pre-line">@((MarkupString)TwitterContent.FullText)</p>
                        <footer class="blockquote-footer">@string.Format("@{0}", TwitterContent.UserName)</footer>
                    </blockquote>
                }
                <a href="@TwitterContent.TweetIdentifier.Url">
                    <time datetime="@TwitterContent.CreatedAtUtc.ToString("O", CultureInfo.InvariantCulture)">
                        @TwitterContent.CreatedAtUtc.ToString("f", CultureInfo.InvariantCulture)
                    </time>
                </a>
                @if (TwitterContent.Views is not null)
                {
                    <span> - <strong>@FormatNumber(TwitterContent.Views.Value)</strong> <small>Views</small></span>
                }
                @if (!string.IsNullOrEmpty(TwitterContent.Source))
                {
                    <span> - @((MarkupString)TwitterContent.Source)</span>
                }

                <ul class="list-inline mt-1">
                    <li class="list-inline-item"><strong>@FormatNumber(TwitterContent.RetweetCount)</strong> <small>Retweets</small></li>
                    <li class="list-inline-item"><strong>@FormatNumber(TwitterContent.QuoteCount)</strong> <small>Quotes</small></li>
                    <li class="list-inline-item"><strong>@FormatNumber(TwitterContent.FavoriteCount)</strong> <small>Likes</small></li>
                    <li class="list-inline-item"><strong>@FormatNumber(TwitterContent.BookmarkCount)</strong> <small>Bookmarks</small></li>
                </ul>
            </p>

            @{
                int videoNumber = 0;
            }
            @foreach (var video in TwitterContent.Media.OfType<TweetMediaVideo>())
            {
                videoNumber++;
                <div class="card border-0 mb-3">
                    <div class="row g-0">
                        <div class="col-md-4">
                            @{
                                videoMediaUrl ??= video.MediaUrl.ToString();
                            }
                            <img src="@video.MediaUrl" class="img-fluid rounded mb-2" alt="Video thumbnail">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body pt-0">
                                <h2 class="card-title">Video #@videoNumber</h2>
                                <div class="card-text">
                                    <ul class="list-inline mt-1">
                                        @if (@video.Duration is not null)
                                        {
                                            <li class="list-inline-item"><strong>@FormatDuration(video.Duration.Value)</strong></li>
                                        }
                                        @if (@video.Views is not null)
                                        {
                                            <li class="list-inline-item"><strong>@FormatNumber(@video.Views.Value)</strong> <small>Views</small></li>
                                        }
                                    </ul>
                                    <div class="alert alert-primary d-flex align-items-center" role="alert">
                                        <span class="oi oi-info me-2" data-glyph="info" title="Information" aria-hidden="true"></span>
                                        <span class="fw-medium">Right click your selection and choose "Save as..." to save the video on your device.</span>
                                    </div>
                                </div>
                                <div class="list-group">
                                    @{
                                        var videoSources = video.VideoSources.OrderByDescending(vs => vs.Bitrate).ToArray();
                                        int videoSourceIndex = 0;
                                    }
                                    @foreach (var source in videoSources)
                                    {
                                        <a class="btn btn-primary list-group-item list-group-item-action mb-1" role="button" href="@source.Url.ToString()" target="_blank">
                                            <div class="d-flex w-100 justify-content-between">
                                                <h5 class="mb-1">@CreateVideoResolutionText(videoSources, videoSourceIndex)</h5>
                                                <span class="oi oi-cloud-download" data-glyph="cloud-download" title="Download" aria-hidden="true"></span>
                                            </div>
                                            <p class="mb-1">
                                                @if (source.Size != VideoSize.Empty)
                                                {
                                                    @string.Format("{0} x {1}", @source.Size.Width, @source.Size.Height)
                                                }
                                                else
                                                {
                                                    @((MarkupString)"Unknown video size")
                                                }
                                            </p>
                                            <ul class="list-unstyled mb-0">
                                                @if (source.ContentLength != null)
                                                {
                                                    <li class="list-item"><small>Size: @source.ContentLength.Value.Bytes().Humanize("#.#")</small></li>
                                                }
                                                <li class="list-item"><small>Bitrate: @string.Format("{0:N0}", @source.Bitrate)</small></li>
                                            </ul>
                                        </a>
                                        videoSourceIndex++;
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (ShowProblemText)
            {
                <div class="alert alert-warning" role="alert">
                    <span class="oi oi-eye me-2" data-glyph="info" title="Information" aria-hidden="true"></span>
                    <span class="fw-bold">Issue with some videos</span>
                    <p>It seems that various videos are currently affected by a problem on the side of X.com<br>After downloading the video can't be played, e.g. the screen stays black. The reason is probably a corrupted MP4 video format.</p>
                    <p>I am investigating and try to find a solution. All other video download services are also affected by this issue.</p>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">No content has been provided.</div>
}

@code {
    [Parameter]
    public TwitterContent? TwitterContent { get; set; }

    [Parameter]
    public bool ShowProblemText { get; set; }

    private static string CreateVideoResolutionText(VideoSource[] videos, int videoSourceIndex)
    {
        return videoSourceIndex switch
        {
            0 => "Best resolution",
            1 when videos.Length == 5 => "High resolution",
            2 when videos.Length == 5 => "Medium resolution",
            3 when videos.Length == 5 => "Low resolution",
            1 when videos.Length == 4 => "High resolution",
            2 when videos.Length == 4 => "Medium resolution",
            1 when videos.Length == 3 => "Medium resolution",
            _ => "Lowest resolution"
        };
    }

    private static string FormatNumber(int value)
    {
        if (value >= 10_000)
            return value.ToMetric(decimals: 1).ToUpperInvariant();

        return "{0:N0}".FormatWith(value);
    }

    private static string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalSeconds <= 60)
            return duration.Humanize();

        return duration.Humanize(precision: 2);
    }
}
