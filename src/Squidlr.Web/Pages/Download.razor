@page "/download"

@using DotNext;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Options;
@using System.Net;
@using Serilog.Context;
@using Squidlr.Instagram;
@using Squidlr.Twitter;
@using Squidlr.Twitter.Utilities;
@using Squidlr.Web.Clients;
@using Squidlr.Web.States;
@using Squidlr.Web.Telemetry;
@using Squidlr;

@inject NavigationManager NavigationManager
@inject RequestVideoState RequestVideoState
@inject ApiClient ApiClient
@inject UrlResolver UrlResolver

@implements IDisposable

<head>
    <meta name="robots" content="noindex, nofollow" />
    <meta name="description" content="@SeoProperties.Description" />
</head>

<PageTitle>@(SeoProperties.CreatePageTitle("Download"))</PageTitle>

<div class="d-flex flex-column align-items-center justify-content-center">
    @if (content is InstagramContent instagramContent)
    {
        <InstagramContentView Content="@instagramContent" />
    }
    @if (content is TwitterContent twitterContent)
    {
        <TwitterContentView Content="@twitterContent" ShowProblemText=false />
    }

    @if (errorMessage is not null)
    {
        <h2 class="mt-4 text-center">Oh no! Something went wrong 😓</h2>
        <div class="alert alert-warning fs-5" role="alert">@errorMessage</div>
    }

    @if (isBusy)
    {
        <div class="mt-4 text-center">
            <h2>Download in progress...</h2>
            <p class="lead">Your requested video is being processed.<br>Sit back and relax ☕</p>
        </div>
        <BusyIndicator IsBusy="@isBusy" />
    }
    else
    {
        <div class="mt-4 container">
            <h2 class="text-center">Let's download another video</h2>
            <VideoSearchQuery />
            <PlatformNavigation />
        </div>
    }
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "url")]
    public string? Url { get; set; }

    private Content? content;

    private bool isBusy = true;

    private string? errorMessage;

    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override async Task OnParametersSetAsync()
    {
        isBusy = true;
        content = null;
        errorMessage = null;
        RequestVideoState.Url = Url;

        var contentIdentifier = UrlResolver.ResolveUrl(Url);
        if (Url == null || contentIdentifier == ContentIdentifier.Unknown)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        try
        {
            var response = await ApiClient.GetContentAsync(contentIdentifier.Url, cts.Token);

            if (response.IsSuccessful)
            {
                content = response.Value;
            }
            else
            {
                SetErrorMessage(response.Error);
            }
        }
        catch (OperationCanceledException)
        {
            SetErrorMessage(RequestContentResult.Canceled);
        }
        catch (ApiClientException e)
        {
            SetErrorMessage(e);
        }

        isBusy = false;
    }

    private void SetErrorMessage(RequestContentResult result)
    {
        if (result == RequestContentResult.Success) return;

        errorMessage = result switch
        {
            RequestContentResult.NotFound => "Unfortunately the requested content could not be found.",
            RequestContentResult.PlatformNotSupported => "The requested content seems to belong to an unsupported social media platform.",
            RequestContentResult.NoVideo => "It seems that the content does not contain any video.",
            RequestContentResult.UnsupportedVideo => "The content contains an embedded video source which is not yet supported.",
            RequestContentResult.AdultContent => "Age-restricted adult content. This content might not be appropriate for people under 18 years old.",
            RequestContentResult.AccountSuspended => "The account containing the requested content has been suspended.",
            RequestContentResult.Protected => "The account owner limits who can view its content.",
            RequestContentResult.GatewayError => "The response from the social media servers was not what we expected. Please try again in a few minutes. In the meantime we will try to fix the issue.",
            RequestContentResult.Canceled => "The request has been canceled.",
            _ => "There was an unexpected error. We will try to fix that as soon as possible!"
        };
    }

    private void SetErrorMessage(ApiClientException exception)
    {
        errorMessage = exception.StatusCode switch
        {
            HttpStatusCode.TooManyRequests => "You created too many requests. Please try again a bit later.",
            _ => "There was an unexpected error. We will try to fix that as soon as possible!"
        };
    }

    void IDisposable.Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
